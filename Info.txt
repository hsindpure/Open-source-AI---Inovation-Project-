🧩 Project Summary:
Create an AI-powered, open-source web application where:

Users can upload an Excel file containing their data.

An AI model automatically generates a fully functional HTML + CSS dashboard based on the uploaded data.

The dashboard includes an integrated AI chatbot that users can interact with regarding the uploaded data.

📋 Requirements (Step-by-Step Breakdown):
1. Landing Page
The landing page should be visually engaging with:

High-quality animated analytical charts and graphs.

Smooth loading animations.

A prominent "Get Started" button.

When clicked, it should navigate the user to a second page for data upload.

2. File Upload & Data Processing
On the second page:

Users should be able to upload Excel files (.xlsx).

Once uploaded:

Convert the Excel data into a JSON object.

Use JSON.stringify() to convert the JSON data into a string.

Send this string to the OpenAI model with a pre-defined prompt.

3. AI Model Responsibilities
The model receives the data and:

Identifies the type of data (e.g., numerical, categorical, time-series, mixed).

Evaluates data characteristics:

pseudo
Copy
Edit
dataType ← classificationResult.type
dataSize ← COUNT rows in cleanedData
numberOfFeatures ← COUNT columns in cleanedData
featureTypes ← classificationResult.featureTypes
Based on this analysis, it determines the appropriate visualizations:

pseudo
Copy
Edit
IF numerical AND 1 feature → Histogram
IF numerical AND 2 features → Scatter Plot
IF categorical AND 1 feature → Bar Chart
IF categorical AND 2 features → Grouped/Stacked Bar Chart
IF time-series → Line Chart
IF mixed types → Combination Chart (e.g., scatter + bar)
ELSE → Table (fallback)
Displays a recommendation to the user:

“Based on your data, the recommended visualization is: [Chart Type]”

Optionally generates the visualizations automatically.

4. Auto-Generated Dashboard Layout
The dashboard should include:

Header bar

Display the uploaded file name.

Filter Section

2–3 dropdown select filters based on data.

“Clear All Selections” button.

KPIs Section

If applicable, show 4–5 KPIs (Key Performance Indicators).

If no KPI-suitable data is available, skip this section.

Charts Section

Display 4 dynamic, interactive charts.

Layout: maximum of 2 charts per row.

Charts should be:

Drill-down capable.

Interconnected: selecting a point on one chart filters others accordingly.

Animation & Transitions

Smooth, modern animations for loading, transitions, and chart interactions.


I need to create this whole project in html, css, bootrrap, font- awesoe, Plane Javascript and Jquery, to create the charts use Echart library and create at least two 3D charts in dashboard

dont use typescript or react or angular framework, Just use vallina js, jquery, Echart, Bootstrap
